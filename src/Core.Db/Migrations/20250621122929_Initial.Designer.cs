// <auto-generated />
using System.Collections.Generic;
using Core.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Core.Db.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250621122929_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Action.ActionDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionFunction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CaseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("TagUsedInAction")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("CaseId", "Name")
                        .IsUnique();

                    b.ToTable("ActionDefinitions");
                });

            modelBuilder.Entity("Core.Models.Common.Case", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MathJsUri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("Core.Models.Common.Tenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Core.Models.Data.DataDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionForCalculated")
                        .HasColumnType("text");

                    b.Property<bool>("AutoIncrease")
                        .HasColumnType("boolean");

                    b.Property<int?>("CalculateType")
                        .HasColumnType("integer");

                    b.Property<long>("CaseId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ConnectionType")
                        .HasColumnType("integer");

                    b.Property<string>("InitialValue")
                        .HasColumnType("text");

                    b.Property<bool>("MultipleValues")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PathForConnected")
                        .HasColumnType("text");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean");

                    b.Property<int>("ValueType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CaseId", "Name")
                        .IsUnique();

                    b.ToTable("DataDefinitions");
                });

            modelBuilder.Entity("Core.Models.Data.DataEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CaseId")
                        .HasColumnType("bigint");

                    b.Property<long>("DataDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<List<string>>("Values")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("DataDefinitionId");

                    b.HasIndex("CaseId", "DataDefinitionId")
                        .IsUnique();

                    b.ToTable("DataEntries");
                });

            modelBuilder.Entity("Core.Models.Data.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CaseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("UniqueDefinition")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CaseId", "Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DataEntryTag", b =>
                {
                    b.Property<long>("DataEntriesId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagsId")
                        .HasColumnType("bigint");

                    b.HasKey("DataEntriesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("DataEntryTag");
                });

            modelBuilder.Entity("Core.Models.Action.ActionDefinition", b =>
                {
                    b.HasOne("Core.Models.Common.Case", "Case")
                        .WithMany("ActionDefinitions")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Core.Models.Common.Case", b =>
                {
                    b.HasOne("Core.Models.Common.Tenant", "Tenant")
                        .WithMany("Cases")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Core.Models.Data.DataDefinition", b =>
                {
                    b.HasOne("Core.Models.Common.Case", "Case")
                        .WithMany("DataDefinitions")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Core.Models.Data.DataEntry", b =>
                {
                    b.HasOne("Core.Models.Common.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Data.DataDefinition", "DataDefinition")
                        .WithMany()
                        .HasForeignKey("DataDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("DataDefinition");
                });

            modelBuilder.Entity("Core.Models.Data.Tag", b =>
                {
                    b.HasOne("Core.Models.Common.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("DataEntryTag", b =>
                {
                    b.HasOne("Core.Models.Data.DataEntry", null)
                        .WithMany()
                        .HasForeignKey("DataEntriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Data.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Common.Case", b =>
                {
                    b.Navigation("ActionDefinitions");

                    b.Navigation("DataDefinitions");
                });

            modelBuilder.Entity("Core.Models.Common.Tenant", b =>
                {
                    b.Navigation("Cases");
                });
#pragma warning restore 612, 618
        }
    }
}
